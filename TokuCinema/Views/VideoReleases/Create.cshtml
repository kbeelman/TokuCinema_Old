@model TokuCinema.Models.VideoRelease

@{
    ViewBag.Title = "Create";
    TokuCinema.Models.TokuCinema_DataEntities db = new TokuCinema.Models.TokuCinema_DataEntities();
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Video Release</h4>
        <p>* Indicates required field</p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <script src="~/Scripts/ChildFactory.js"></script>

        <script>
            /* Instantiate Version Factory

            *Currently a child factory relies on the below markup:
            - span element to attach child selector markup                          <span id="versionSelectorPlaceHolder"></span>
            - div element to append versions:                                       <div class="form-group" id="selectedVersions"></div>

            *Optional 
            - specify controller action if child records need to be filtered by another parent (i.e. video media)                        

            * Relies on a partial view containing desired results to be retrieved through an Ajax call
            */
            var versionFactory = new childFactory("versionSelectorPlaceHolder", "Version", "GetVersions", "VideoReleases", "VideoVersionTypeId", "GetVideoMedia", "videoMediaId");

        </script>      

        @*Currently Used by versionFactory*@
        <span id="versionSelectorPlaceHolder"></span>

        @*Currently Used by versionFactory*@
        <div class="form-group" id="selectedVersions"></div>

        <div class="form-group">
            @Html.LabelFor(model => model.DistributorId, "DistributorId", htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.DropDownList("DistributorId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DistributorId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PackagingId, "PackagingId", htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.DropDownList("PackagingId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PackagingId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CatalogCode, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CatalogCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CatalogCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UPC, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UPC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UPC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiscCount, htmlAttributes: new { @class = "control-label col-md-2 required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DiscCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DiscCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            versionFactory.createChildSelector();
        });
    </script>
}
