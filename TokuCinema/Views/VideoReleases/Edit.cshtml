@model TokuCinema.Models.VideoRelease

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Video Release</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.VideoReleaseId)

        <div class="form-group">
            @Html.LabelFor(model => model.DistributorId, "DistributorId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DistributorId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DistributorId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PackagingId, "PackagingId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PackagingId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PackagingId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VideoMediaId, "VideoMediaId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("VideoMediaId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VideoMediaId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CatalogCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CatalogCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CatalogCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UPC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UPC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UPC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiscCount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DiscCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DiscCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AspectRatio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AspectRatio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AspectRatio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Runtime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Runtime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Runtime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChapterStops, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ChapterStops, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChapterStops, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Dynamically add reviews to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.VideoReviews, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Video Review", "CreateReview", "VideoReviews", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        <hr />

        @*Dynamically add audio tracks to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.AudioTracks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Audio Track", "Create", "AudioTracks", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add subtitle tracks to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.SubtitleTracks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Subtitle Track", "Create", "SubtitleTracks", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add regions to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.Regions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Region", "Create", "Regions", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add media files to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.MediaFiles, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Media Files", "Create", "MediaFiles", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add standards to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.Standards, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Standard", "Create", "Standards", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add video box set to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.VideoBoxSets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Video Box Set", "Create", "VideoBoxSets", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add shopping items to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.ShoppingItems, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Shopping Items", "Create", "Shopping Items", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add formats to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.Formats, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Format", "Create", "Formats", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        @*Dynamically add video version to this release*@
        <div class="form-group">
            @Html.LabelFor(model => model.VideoVersions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ActionLink("Add Video Version", "Create", "VideoVersions", new { id = Model.VideoReleaseId }, null)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
